name: user_service

services:
  user_service:
    build:
      context: ../..
      dockerfile: deployments/docker/Dockerfile
    environment:
      - RUNNING_ENVIRONMENT=deployment
    volumes:
      - ../../deployment_logs/:/app/logs/
    # ports:
      # - "80:80"
      # - "50051:50051"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user.rule=PathPrefix(`/user`)"
      - "traefik.http.routers.user.entrypoints=web"
      - "traefik.http.services.user.loadbalancer.server.port=80"
      - "traefik.http.routers.user.middlewares=user-stripprefix"
      - "traefik.http.middlewares.user-stripprefix.stripprefix.prefixes=/user"
      - "traefik.docker.network=traefik_network"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - user_network
      - traefik_network
  
  postgres:
    image: postgres:latest
    container_name: user_service_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
      POSTGRES_DB: user_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ../../postgres_data/:/var/lib/postgresql/data/
    networks:
      - user_network

  redis:
    image: redis:latest
    container_name: user_service_redis
    networks:
      - user_network

networks:
  user_network:
    driver: bridge
    name: user_network
  traefik_network:
    external: true
    name: traefik_network